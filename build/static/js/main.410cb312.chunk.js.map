{"version":3,"sources":["components/Forecast/Forecast.module.css","components/Conditions/Conditions.module.css","components/SearchedCities/SearchedCities.module.css","images/weather.png","components/Conditions/Conditions.js","components/SearchedCities/SearchedCities.js","components/Forecast/Forecast.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","conditions","props","className","Wrapper","error","Small","loading","Loader","responseObj","cod","name","Math","round","main","temp","weather","description","SearchedCities","keys","Object","cities","convertTimestamp","timestamp","d","Date","yyyy","getFullYear","mm","getMonth","slice","dd","getDate","hh","getHours","h","ampm","getMinutes","length","id","type","onClick","localStorage","clear","returnValue","i","parsedObj","JSON","parse","push","unit","dt","renderCityData","Forecast","city","setCity","useState","setUnit","setResponseObj","setError","setLoading","uriEncodedCity","encodeURIComponent","onSubmit","e","preventDefault","includes","obj","setTimeout","fetch","then","response","json","Error","convertedUnit","setItem","stringify","catch","err","console","log","message","placeholder","maxLength","textInput","value","onChange","target","Radio","checked","Button","Conditions","App","style","width","height","src","weatherImage","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.410cb312.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textInput\":\"Forecast_textInput__37rXm\",\"Radio\":\"Forecast_Radio__385rf\",\"Button\":\"Forecast_Button__hOOvO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"Conditions_Wrapper__1tD_P\",\"Small\":\"Conditions_Small__3SWrA\",\"Loader\":\"Conditions_Loader__2pi6T\",\"spin\":\"Conditions_spin__Yf8rm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"SearchedCities_Wrapper__30YDT\"};","module.exports = __webpack_public_path__ + \"static/media/weather.a0bd645e.png\";","import React from 'react';\r\nimport {\r\n    Wrapper,\r\n    Small,\r\n    Loader\r\n} from './Conditions.module.css'\r\n\r\nconst conditions = (props) => {\r\n    return (\r\n        <div className={Wrapper}>\r\n\r\n            {props.error && <small className={Small}>Please enter a valid city.</small>}\r\n\r\n            {props.loading && <div className={Loader} />}\r\n\r\n\r\n            {props.responseObj.cod === 200 ?\r\n                <div>\r\n                    <p><strong>{props.responseObj.name}</strong></p>\r\n                    <p>It is currently {Math.round(props.responseObj.main.temp)} degrees out with {props.responseObj.weather[0].description}.</p>\r\n                </div>\r\n            : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default conditions;","import React, { useState } from 'react';\r\nimport Wrapper from './SearchedCities.module.css';\r\n\r\nconst SearchedCities = (props) => {\r\n    let keys = Object.keys(props.cities);\r\n\r\n    function convertTimestamp(timestamp) {\r\n        var d = new Date(timestamp * 1000),\r\n            yyyy = d.getFullYear(),\r\n            mm = ('0' + (d.getMonth() + 1)).slice(-2),\r\n            dd = ('0' + d.getDate()).slice(-2),\r\n            hh = d.getHours(),\r\n            h = hh,\r\n            min = ('0' + d.getMinutes()).slice(-2),\r\n            ampm = 'AM',\r\n            time;\r\n    \r\n        if (hh > 12) {\r\n            h = hh - 12;\r\n            ampm = 'PM';\r\n        } else if (hh === 12) {\r\n            h = 12;\r\n            ampm = 'PM';\r\n        } else if (hh == 0) {\r\n            h = 12;\r\n        }\r\n    \r\n        // ie: 2014-03-24, 3:00 PM\r\n        time = yyyy + '-' + mm + '-' + dd + ', ' + h + ':' + min + ' ' + ampm;\r\n        return time;\r\n    }\r\n\r\n    function renderCityData() {\r\n        let returnValue = [];\r\n        for(let i=0; i<props.cities.length; i++) {\r\n            let parsedObj = JSON.parse(props.cities[keys[i]]);\r\n            returnValue.push(\r\n                <div>                    \r\n                    <p>City: {parsedObj.name},\r\n                    Temperature in {parsedObj.unit}: {parsedObj.main.temp},\r\n                    Date Searched: {convertTimestamp(parsedObj.dt)}</p>\r\n                </div>\r\n            )\r\n        }\r\n        return returnValue;\r\n    }\r\n    function handleClearRecent() {\r\n        localStorage.clear();\r\n    }\r\n\r\n    return (\r\n        <div className={Wrapper}>\r\n            {\r\n            props.cities.length > 0 ? \r\n                <div>\r\n                    <p><strong>Recently Searched Cities </strong><button id=\"clear\" type=\"clear\" onClick={handleClearRecent}>Clear</button></p>\r\n                    {renderCityData()}\r\n                </div>\r\n            : null\r\n            }\r\n        </div>\r\n    );\r\n    // return null;\r\n}\r\n\r\nexport default SearchedCities;","import React, { useState } from 'react';\r\nimport Conditions from '../Conditions/Conditions';\r\nimport {\r\n    textInput,\r\n    Radio,\r\n    Button\r\n} from './Forecast.module.css';\r\nimport SearchedCities from '../SearchedCities/SearchedCities';\r\n\r\nconst Forecast = () => {\r\n\r\n    let [city, setCity] = useState('');\r\n    let [unit, setUnit] = useState('imperial');\r\n    let [responseObj, setResponseObj] = useState({});\r\n    let [error, setError] = useState(false);\r\n    let [loading, setLoading] = useState(false);\r\n    const uriEncodedCity = encodeURIComponent(city);    \r\n    const appId = '094aa776d64c50d5b9e9043edd4ffd00';\r\n\r\n    function getForecast(e) {\r\n        e.preventDefault();\r\n\r\n        if (city.length === 0) {\r\n            return setError(true);\r\n        }\r\n\r\n        // Clear state in preparation for new data\r\n        setError(false);\r\n        setResponseObj({});\r\n        \r\n        setLoading(true);\r\n\r\n        if (localStorage.length > 0 && Object.keys(localStorage).includes(uriEncodedCity)) {\r\n            for(let i=0; i<localStorage.length; i++) {\r\n                let keys = Object.keys(localStorage);\r\n                let obj = localStorage[keys[i]];\r\n                setResponseObj(JSON.parse(obj));\r\n                setTimeout(() => {\r\n                    setLoading(false);\r\n                }, 500);\r\n                break;\r\n            }\r\n        }\r\n        else {\r\n            fetch(`http://api.openweathermap.org/data/2.5/weather?q=${uriEncodedCity}&units=${unit}&appid=${appId}`, {\r\n                \"method\": \"GET\",\r\n                })\r\n                .then(response => response.json())\r\n                .then(response => {\r\n                    if (response.cod !== 200) {\r\n                        throw new Error()\r\n                    }\r\n    \r\n                    setResponseObj(response);\r\n                    let convertedUnit = unit === \"imperial\" ? \"Fahrenheit\" : \"Celsius\";\r\n                    localStorage.setItem(\r\n                        `${response.name}`,\r\n                        JSON.stringify({...response, unit: convertedUnit})\r\n                        );\r\n                    setLoading(false);\r\n                })\r\n                .catch(err => {\r\n                    setError(true);\r\n                    setLoading(false);\r\n                    console.log(err.message);\r\n                });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2>Find Current Weather Conditions</h2>\r\n            <form onSubmit={getForecast}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    id=\"cityInput1\"\r\n                    placeholder=\"Enter City\"\r\n                    maxLength=\"50\"\r\n                    className={textInput}\r\n                    value={city}\r\n                    onChange={(e) => setCity(e.target.value)}\r\n                    />\r\n\r\n                <SearchedCities cities={localStorage}/>\r\n\r\n                <label className={Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"imperial\"}\r\n                        value=\"imperial\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Fahrenheit\r\n                </label>\r\n                <label className={Radio}>\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"units\"\r\n                        checked={unit === \"metric\"}\r\n                        value=\"metric\"\r\n                        onChange={(e) => setUnit(e.target.value)}\r\n                        />\r\n                    Celsius\r\n                </label>\r\n\r\n                <button className={Button} type=\"submit\">Get Forecast</button>\r\n            </form>\r\n            <Conditions\r\n               responseObj={responseObj}\r\n               city={uriEncodedCity}\r\n               error={error}\r\n               loading={loading}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Forecast;","import React from 'react';\r\nimport './App.css';\r\nimport Forecast from \"./components/Forecast/Forecast\";\r\nimport weatherImage from './images/weather.png';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img style={{width:'200px', height:'200px'}} src={weatherImage} alt='weather' />\r\n        <h1>React Weather App</h1>\r\n      </header>\r\n      <main>\r\n        <Forecast />\r\n      </main>\r\n      <footer>\r\n        © Shawn Mathias, 2021\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}